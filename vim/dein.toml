# ColorScheme: hybrid and init
[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
    set background=dark
    au VimEnter * nested colorscheme hybrid
    '''
# lightline use 'jellybeans'
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
    \	'colorscheme': 'jellybeans',
    \	'active': {
    \	    'left': [
    \		[ 'mode', 'paste' ],
    \		[ 'cocstatus', 'currentfunction', 'readonly', 'filename', 'modified' ]
    \	    ]
    \	},
    \	'component_function': {
    \	    'cocstatus': 'coc#status',
    \	    'currentfunction': 'CocCurrentFunction'
    \	},
    \}
'''

# Completion
#
# deoplete requires:
# $ pip3 install --user msgpack
# nvim-yarp requires:
# $ pip3 install --user pynvim
#[[plugins]]
#repo = 'Shougo/deoplete.nvim'
#hook_add = '''
#    if !has('nvim')
#       call dein#add('roxma/nvim-yarp')
#       call dein#add('roxma/vim-hug-neovim-rpc')
#    endif
#    let g:deoplete#enable_at_startup = 1
#'''

[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0
rev = 'release'
hook_add = '''
    " Global extension names to install when they aren't installed.
    let g:coc_global_extensions = [
       \'coc-json',
       \'coc-tsserver',
       \'coc-eslint',
       \'coc-vetur',
       \'coc-stylelint',
    \]
    " integration with lightline
    " ref g:lightline.componet_function
    function! CocCurrentFunction()
        return get(b:, 'coc_current_function', '')
    endfunction
    autocmd FileType json syntax match Comment +\/\/.\+$+
    " coc-nvim recommended setting
    " select competeion-item by Enter
    " <C-g>u used INSERT mode, set undo level each enter
    inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
    " select first competeion item if no item has been selected
    inoremap <silent><expr> <CR> pumvisible() ?
       \coc#_select_confirm() : "\<C-g>u\<CR>"

    " Map <tab>(, <s-tab>) to trigger completion and
    " navigate to the next (, previous) item: 
    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
    endfunction
    inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

    " use [g ]g to navigate diagnostics
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " go to code navigation
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " use K to show documentaion in preview window
    nnoremap <silent> K :call <SID>show_documentation()<CR>
    function! s:show_documentation() abort
	if (index(['vim','help'], &filetype) >= 0)
	    execute 'h '.expand('<cword>')
	elseif (coc#rpc#ready())
	    call CocActionAsync('doHover')
	else
	    execute '!' . &keywordprg . " " . expand('<cword>')
	endif
    endfunction

    "call format by :Format
    command! -nargs=0 Format :call CocAction('format')
'''

# html tag creater
[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
    " enable just for html/css/vue
    let g:user_emmet_install_global = 0
    autocmd FileType html,css,vue EmmetInstall
    " setting
    let g:user_emmet_settings = {
    \   'variables': {
    \       'lang': 'ja',
    \   },
    \}
'''

#[[plugins]]
#repo = 'dense-analysis/ale'
#hook_add = '''
#    " recommended settings -- :ALEFixSuggest
#    let g:ale_fixers = {
#    \   '*': ['remove_trailing_lines', 'trim_whitespace'],
#    \   'javascript': ['eslint'],
#    \}
#    " automatically fix at file saved
#    let g:ale_fix_on_save = 1
#
#    call deoplete#custom#option('sources', {
#    \   '_': ['ale'],
#    \})
#    let g:ale_completion_enabled = 1
#    let g:ale_completion_autoimport = 1
#'''

# fuzzy finder
[[plugins]]
repo = '/home/gilito/.config/fzf'
[[plugins]]
repo = 'junegunn/fzf.vim'

# markdown viewer
[[plugins]]
repo = 'previm/previm'
hook_add = '''
    " xterm format
    let g:previm_open_cmd = 'firefox'
    " real time preview
    let g:previm_enable_realtime = 1
'''
# easy create table
[[plugins]]
repo = 'mattn/vim-maketable'

# japanese help
[[plugins]]
repo = 'vim-jp/vimdoc-ja'

# realtime substitution
[[plugins]]
repo = 'markonm/traces.vim'

# surrond action
[[plugins]]
repo = 'tpope/vim-surround'

# translation en to ja
[[plugins]]
repo = 'skanehira/translate.vim'
